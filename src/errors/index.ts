/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * InvalidCustomSplToken: 'Custom SPL Token doesnt match with Host provided token'
 *
 * @category Errors
 * @category generated
 */
export class InvalidCustomSplTokenError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'InvalidCustomSplToken'
  constructor() {
    super('Custom SPL Token doesnt match with Host provided token')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidCustomSplTokenError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new InvalidCustomSplTokenError())
createErrorFromNameLookup.set(
  'InvalidCustomSplToken',
  () => new InvalidCustomSplTokenError()
)

/**
 * SignerNotAdmin: 'The Signer of this transaction is not the admin'
 *
 * @category Errors
 * @category generated
 */
export class SignerNotAdminError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'SignerNotAdmin'
  constructor() {
    super('The Signer of this transaction is not the admin')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SignerNotAdminError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new SignerNotAdminError())
createErrorFromNameLookup.set('SignerNotAdmin', () => new SignerNotAdminError())

/**
 * DataNotUpdated: 'data not updated'
 *
 * @category Errors
 * @category generated
 */
export class DataNotUpdatedError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'DataNotUpdated'
  constructor() {
    super('data not updated')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, DataNotUpdatedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new DataNotUpdatedError())
createErrorFromNameLookup.set('DataNotUpdated', () => new DataNotUpdatedError())

/**
 * WrongInstruction: 'This event is paid but the mint ix is for free tickets'
 *
 * @category Errors
 * @category generated
 */
export class WrongInstructionError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'WrongInstruction'
  constructor() {
    super('This event is paid but the mint ix is for free tickets')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongInstructionError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new WrongInstructionError())
createErrorFromNameLookup.set(
  'WrongInstruction',
  () => new WrongInstructionError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
