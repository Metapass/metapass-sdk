/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from "@solana/web3.js";
import * as beetSolana from "@metaplex-foundation/beet-solana";
import * as beet from "@metaplex-foundation/beet";

/**
 * Arguments used to create {@link AdminAccount}
 * @category Accounts
 * @category generated
 */
export type AdminAccountArgs = {
  admins: web3.PublicKey[];
  bump: number;
  authority: web3.PublicKey;
  verifiedPartners: web3.PublicKey[];
};

export const adminAccountDiscriminator = [153, 119, 180, 178, 43, 66, 235, 148];
/**
 * Holds the data for the {@link AdminAccount} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class AdminAccount implements AdminAccountArgs {
  private constructor(
    readonly admins: web3.PublicKey[],
    readonly bump: number,
    readonly authority: web3.PublicKey,
    readonly verifiedPartners: web3.PublicKey[]
  ) {}

  /**
   * Creates a {@link AdminAccount} instance from the provided args.
   */
  static fromArgs(args: AdminAccountArgs) {
    return new AdminAccount(
      args.admins,
      args.bump,
      args.authority,
      args.verifiedPartners
    );
  }

  /**
   * Deserializes the {@link AdminAccount} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [AdminAccount, number] {
    return AdminAccount.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link AdminAccount} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey
  ): Promise<AdminAccount> {
    const accountInfo = await connection.getAccountInfo(address);
    if (accountInfo == null) {
      throw new Error(`Unable to find AdminAccount account at ${address}`);
    }
    return AdminAccount.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      "H8DZgtTkHL9nNjG8zvgqRMxkjXiWtde4nYScsUdzFaDN"
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, adminAccountBeet);
  }

  /**
   * Deserializes the {@link AdminAccount} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [AdminAccount, number] {
    return adminAccountBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link AdminAccount} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return adminAccountBeet.serialize({
      accountDiscriminator: adminAccountDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link AdminAccount} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: AdminAccountArgs) {
    const instance = AdminAccount.fromArgs(args);
    return adminAccountBeet.toFixedFromValue({
      accountDiscriminator: adminAccountDiscriminator,
      ...instance,
    }).byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link AdminAccount} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: AdminAccountArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      AdminAccount.byteSize(args),
      commitment
    );
  }

  /**
   * Returns a readable version of {@link AdminAccount} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      admins: this.admins,
      bump: this.bump,
      authority: this.authority.toBase58(),
      verifiedPartners: this.verifiedPartners,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const adminAccountBeet = new beet.FixableBeetStruct<
  AdminAccount,
  AdminAccountArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ["accountDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
    ["admins", beet.array(beetSolana.publicKey)],
    ["bump", beet.u8],
    ["authority", beetSolana.publicKey],
    ["verifiedPartners", beet.array(beetSolana.publicKey)],
  ],
  AdminAccount.fromArgs,
  "AdminAccount"
);
