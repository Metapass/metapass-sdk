/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from "@solana/web3.js";
import * as beet from "@metaplex-foundation/beet";
import * as beetSolana from "@metaplex-foundation/beet-solana";
import { EventHost, eventHostBeet } from "../types/EventHost";

/**
 * Arguments used to create {@link EventHostAccount}
 * @category Accounts
 * @category generated
 */
export type EventHostAccountArgs = {
  eventHostStruct: EventHost;
};

export const eventHostAccountDiscriminator = [
  144, 192, 135, 201, 115, 11, 56, 111,
];
/**
 * Holds the data for the {@link EventHostAccount} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class EventHostAccount implements EventHostAccountArgs {
  private constructor(readonly eventHostStruct: EventHost) {}

  /**
   * Creates a {@link EventHostAccount} instance from the provided args.
   */
  static fromArgs(args: EventHostAccountArgs) {
    return new EventHostAccount(args.eventHostStruct);
  }

  /**
   * Deserializes the {@link EventHostAccount} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [EventHostAccount, number] {
    return EventHostAccount.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link EventHostAccount} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey
  ): Promise<EventHostAccount> {
    const accountInfo = await connection.getAccountInfo(address);
    if (accountInfo == null) {
      throw new Error(`Unable to find EventHostAccount account at ${address}`);
    }
    return EventHostAccount.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      "H8DZgtTkHL9nNjG8zvgqRMxkjXiWtde4nYScsUdzFaDN"
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, eventHostAccountBeet);
  }

  /**
   * Deserializes the {@link EventHostAccount} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [EventHostAccount, number] {
    return eventHostAccountBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link EventHostAccount} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return eventHostAccountBeet.serialize({
      accountDiscriminator: eventHostAccountDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link EventHostAccount} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: EventHostAccountArgs) {
    const instance = EventHostAccount.fromArgs(args);
    return eventHostAccountBeet.toFixedFromValue({
      accountDiscriminator: eventHostAccountDiscriminator,
      ...instance,
    }).byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link EventHostAccount} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: EventHostAccountArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      EventHostAccount.byteSize(args),
      commitment
    );
  }

  /**
   * Returns a readable version of {@link EventHostAccount} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      eventHostStruct: this.eventHostStruct,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const eventHostAccountBeet = new beet.FixableBeetStruct<
  EventHostAccount,
  EventHostAccountArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ["accountDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
    ["eventHostStruct", eventHostBeet],
  ],
  EventHostAccount.fromArgs,
  "EventHostAccount"
);
