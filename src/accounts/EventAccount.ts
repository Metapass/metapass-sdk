/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { EventHost, eventHostBeet } from '../types/EventHost'

/**
 * Arguments used to create {@link EventAccount}
 * @category Accounts
 * @category generated
 */
export type EventAccountArgs = {
  title: string
  description: string
  uri: string
  link: string
  fee: beet.bignum
  seats: beet.bignum
  occupiedSeats: beet.bignum
  date: string
  collection: web3.PublicKey
  venue: string
  authority: web3.PublicKey
  creators: web3.PublicKey[]
  eventHost: EventHost
  eventNonce: beet.bignum
  bump: number
  isCutPayedByCreator: boolean
}

const eventAccountDiscriminator = [98, 136, 32, 165, 133, 231, 243, 154]
/**
 * Holds the data for the {@link EventAccount} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class EventAccount implements EventAccountArgs {
  private constructor(
    readonly title: string,
    readonly description: string,
    readonly uri: string,
    readonly link: string,
    readonly fee: beet.bignum,
    readonly seats: beet.bignum,
    readonly occupiedSeats: beet.bignum,
    readonly date: string,
    readonly collection: web3.PublicKey,
    readonly venue: string,
    readonly authority: web3.PublicKey,
    readonly creators: web3.PublicKey[],
    readonly eventHost: EventHost,
    readonly eventNonce: beet.bignum,
    readonly bump: number,
    readonly isCutPayedByCreator: boolean
  ) {}

  /**
   * Creates a {@link EventAccount} instance from the provided args.
   */
  static fromArgs(args: EventAccountArgs) {
    return new EventAccount(
      args.title,
      args.description,
      args.uri,
      args.link,
      args.fee,
      args.seats,
      args.occupiedSeats,
      args.date,
      args.collection,
      args.venue,
      args.authority,
      args.creators,
      args.eventHost,
      args.eventNonce,
      args.bump,
      args.isCutPayedByCreator
    )
  }

  /**
   * Deserializes the {@link EventAccount} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [EventAccount, number] {
    return EventAccount.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link EventAccount} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey
  ): Promise<EventAccount> {
    const accountInfo = await connection.getAccountInfo(address)
    if (accountInfo == null) {
      throw new Error(`Unable to find EventAccount account at ${address}`)
    }
    return EventAccount.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Deserializes the {@link EventAccount} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [EventAccount, number] {
    return eventAccountBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link EventAccount} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return eventAccountBeet.serialize({
      accountDiscriminator: eventAccountDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link EventAccount} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: EventAccountArgs) {
    const instance = EventAccount.fromArgs(args)
    return eventAccountBeet.toFixedFromValue({
      accountDiscriminator: eventAccountDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link EventAccount} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: EventAccountArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      EventAccount.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link EventAccount} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      title: this.title,
      description: this.description,
      uri: this.uri,
      link: this.link,
      fee: this.fee,
      seats: this.seats,
      occupiedSeats: this.occupiedSeats,
      date: this.date,
      collection: this.collection.toBase58(),
      venue: this.venue,
      authority: this.authority.toBase58(),
      creators: this.creators,
      eventHost: this.eventHost,
      eventNonce: this.eventNonce,
      bump: this.bump,
      isCutPayedByCreator: this.isCutPayedByCreator,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const eventAccountBeet = new beet.FixableBeetStruct<
  EventAccount,
  EventAccountArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['title', beet.utf8String],
    ['description', beet.utf8String],
    ['uri', beet.utf8String],
    ['link', beet.utf8String],
    ['fee', beet.u64],
    ['seats', beet.u64],
    ['occupiedSeats', beet.u64],
    ['date', beet.utf8String],
    ['collection', beetSolana.publicKey],
    ['venue', beet.utf8String],
    ['authority', beetSolana.publicKey],
    ['creators', beet.array(beetSolana.publicKey)],
    ['eventHost', eventHostBeet],
    ['eventNonce', beet.u64],
    ['bump', beet.u8],
    ['isCutPayedByCreator', beet.bool],
  ],
  EventAccount.fromArgs,
  'EventAccount'
)
