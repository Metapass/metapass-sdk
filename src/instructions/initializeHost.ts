/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category InitializeHost
 * @category generated
 */
export type InitializeHostInstructionArgs = {
  displayName: string
  profileImg: string
}
/**
 * @category Instructions
 * @category InitializeHost
 * @category generated
 */
const initializeHostStruct = new beet.FixableBeetArgsStruct<
  InitializeHostInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['displayName', beet.utf8String],
    ['profileImg', beet.utf8String],
  ],
  'InitializeHostInstructionArgs'
)
/**
 * Accounts required by the _initializeHost_ instruction
 * @category Instructions
 * @category InitializeHost
 * @category generated
 */
export type InitializeHostInstructionAccounts = {
  eventHostAccount: web3.PublicKey
  authority: web3.PublicKey
}

const initializeHostInstructionDiscriminator = [
  144, 209, 228, 75, 220, 241, 73, 77,
]

/**
 * Creates a _InitializeHost_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InitializeHost
 * @category generated
 */
export function createInitializeHostInstruction(
  accounts: InitializeHostInstructionAccounts,
  args: InitializeHostInstructionArgs
) {
  const { eventHostAccount, authority } = accounts

  const [data] = initializeHostStruct.serialize({
    instructionDiscriminator: initializeHostInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: eventHostAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      'Crvo7H5Qupi7pD63wyyXfoPbzAkU9Hbqwno7xTrXLbKo'
    ),
    keys,
    data,
  })
  return ix
}
