/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from "@solana/spl-token";
import * as beet from "@metaplex-foundation/beet";
import * as web3 from "@solana/web3.js";

/**
 * @category Instructions
 * @category MintTicketForFree
 * @category generated
 */
export type MintTicketForFreeInstructionArgs = {
  uri: string;
};
/**
 * @category Instructions
 * @category MintTicketForFree
 * @category generated
 */
export const mintTicketForFreeStruct = new beet.FixableBeetArgsStruct<
  MintTicketForFreeInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ["instructionDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
    ["uri", beet.utf8String],
  ],
  "MintTicketForFreeInstructionArgs"
);
/**
 * Accounts required by the _mintTicketForFree_ instruction
 *
 * @property [_writable_, **signer**] mintAuthority
 * @property [_writable_] eventAccount
 * @property [_writable_, **signer**] mint
 * @property [_writable_] metadata
 * @property [_writable_] tokenAccount
 * @property [] tokenMetadataProgram
 * @property [_writable_] payer
 * @property [_writable_] masterEdition
 * @property [_writable_] eventHost
 * @property [_writable_] eventHostKey
 * @property [_writable_] adminAccount
 * @property [_writable_] adminKey
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category MintTicketForFree
 * @category generated
 */
export type MintTicketForFreeInstructionAccounts = {
  mintAuthority: web3.PublicKey;
  eventAccount: web3.PublicKey;
  mint: web3.PublicKey;
  tokenProgram?: web3.PublicKey;
  metadata: web3.PublicKey;
  tokenAccount: web3.PublicKey;
  tokenMetadataProgram: web3.PublicKey;
  payer: web3.PublicKey;
  systemProgram?: web3.PublicKey;
  rent?: web3.PublicKey;
  masterEdition: web3.PublicKey;
  eventHost: web3.PublicKey;
  eventHostKey: web3.PublicKey;
  adminAccount: web3.PublicKey;
  adminKey: web3.PublicKey;
  associatedTokenProgram: web3.PublicKey;
};

export const mintTicketForFreeInstructionDiscriminator = [
  241, 247, 24, 79, 169, 206, 190, 73,
];

/**
 * Creates a _MintTicketForFree_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category MintTicketForFree
 * @category generated
 */
export function createMintTicketForFreeInstruction(
  accounts: MintTicketForFreeInstructionAccounts,
  args: MintTicketForFreeInstructionArgs,
  programId = new web3.PublicKey("H8DZgtTkHL9nNjG8zvgqRMxkjXiWtde4nYScsUdzFaDN")
) {
  const [data] = mintTicketForFreeStruct.serialize({
    instructionDiscriminator: mintTicketForFreeInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.mintAuthority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.eventAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.mint,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.metadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenMetadataProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.masterEdition,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.eventHost,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.eventHostKey,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.adminAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.adminKey,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
