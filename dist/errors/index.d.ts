/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
declare type ErrorWithCode = Error & {
    code: number;
};
declare type MaybeErrorWithCode = ErrorWithCode | null | undefined;
/**
 * InvalidCustomSplToken: 'Custom SPL Token doesnt match with Host provided token'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidCustomSplTokenError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * SignerNotAdmin: 'The Signer of this transaction is not the admin'
 *
 * @category Errors
 * @category generated
 */
export declare class SignerNotAdminError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * DataNotUpdated: 'data not updated'
 *
 * @category Errors
 * @category generated
 */
export declare class DataNotUpdatedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * WrongInstruction: 'This event is paid but the mint ix is for free tickets'
 *
 * @category Errors
 * @category generated
 */
export declare class WrongInstructionError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export declare function errorFromCode(code: number): MaybeErrorWithCode;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export declare function errorFromName(name: string): MaybeErrorWithCode;
export {};
