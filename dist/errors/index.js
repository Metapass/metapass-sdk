"use strict";
/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorFromName = exports.errorFromCode = exports.WrongInstructionError = exports.DataNotUpdatedError = exports.SignerNotAdminError = exports.InvalidCustomSplTokenError = void 0;
const createErrorFromCodeLookup = new Map();
const createErrorFromNameLookup = new Map();
/**
 * InvalidCustomSplToken: 'Custom SPL Token doesnt match with Host provided token'
 *
 * @category Errors
 * @category generated
 */
class InvalidCustomSplTokenError extends Error {
    constructor() {
        super('Custom SPL Token doesnt match with Host provided token');
        this.code = 0x1770;
        this.name = 'InvalidCustomSplToken';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidCustomSplTokenError);
        }
    }
}
exports.InvalidCustomSplTokenError = InvalidCustomSplTokenError;
createErrorFromCodeLookup.set(0x1770, () => new InvalidCustomSplTokenError());
createErrorFromNameLookup.set('InvalidCustomSplToken', () => new InvalidCustomSplTokenError());
/**
 * SignerNotAdmin: 'The Signer of this transaction is not the admin'
 *
 * @category Errors
 * @category generated
 */
class SignerNotAdminError extends Error {
    constructor() {
        super('The Signer of this transaction is not the admin');
        this.code = 0x1771;
        this.name = 'SignerNotAdmin';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, SignerNotAdminError);
        }
    }
}
exports.SignerNotAdminError = SignerNotAdminError;
createErrorFromCodeLookup.set(0x1771, () => new SignerNotAdminError());
createErrorFromNameLookup.set('SignerNotAdmin', () => new SignerNotAdminError());
/**
 * DataNotUpdated: 'data not updated'
 *
 * @category Errors
 * @category generated
 */
class DataNotUpdatedError extends Error {
    constructor() {
        super('data not updated');
        this.code = 0x1772;
        this.name = 'DataNotUpdated';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, DataNotUpdatedError);
        }
    }
}
exports.DataNotUpdatedError = DataNotUpdatedError;
createErrorFromCodeLookup.set(0x1772, () => new DataNotUpdatedError());
createErrorFromNameLookup.set('DataNotUpdated', () => new DataNotUpdatedError());
/**
 * WrongInstruction: 'This event is paid but the mint ix is for free tickets'
 *
 * @category Errors
 * @category generated
 */
class WrongInstructionError extends Error {
    constructor() {
        super('This event is paid but the mint ix is for free tickets');
        this.code = 0x1773;
        this.name = 'WrongInstruction';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, WrongInstructionError);
        }
    }
}
exports.WrongInstructionError = WrongInstructionError;
createErrorFromCodeLookup.set(0x1773, () => new WrongInstructionError());
createErrorFromNameLookup.set('WrongInstruction', () => new WrongInstructionError());
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
function errorFromCode(code) {
    const createError = createErrorFromCodeLookup.get(code);
    return createError != null ? createError() : null;
}
exports.errorFromCode = errorFromCode;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
function errorFromName(name) {
    const createError = createErrorFromNameLookup.get(name);
    return createError != null ? createError() : null;
}
exports.errorFromName = errorFromName;
