"use strict";
/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.eventAccountBeet = exports.EventAccount = void 0;
const beet = __importStar(require("@metaplex-foundation/beet"));
const beetSolana = __importStar(require("@metaplex-foundation/beet-solana"));
const EventHost_1 = require("../types/EventHost");
const eventAccountDiscriminator = [98, 136, 32, 165, 133, 231, 243, 154];
/**
 * Holds the data for the {@link EventAccount} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
class EventAccount {
    constructor(title, description, uri, link, fee, seats, occupiedSeats, date, collection, venue, authority, creators, eventHost, eventNonce, bump, isCutPayedByCreator, isCustomSplToken, customSplToken) {
        this.title = title;
        this.description = description;
        this.uri = uri;
        this.link = link;
        this.fee = fee;
        this.seats = seats;
        this.occupiedSeats = occupiedSeats;
        this.date = date;
        this.collection = collection;
        this.venue = venue;
        this.authority = authority;
        this.creators = creators;
        this.eventHost = eventHost;
        this.eventNonce = eventNonce;
        this.bump = bump;
        this.isCutPayedByCreator = isCutPayedByCreator;
        this.isCustomSplToken = isCustomSplToken;
        this.customSplToken = customSplToken;
    }
    /**
     * Creates a {@link EventAccount} instance from the provided args.
     */
    static fromArgs(args) {
        return new EventAccount(args.title, args.description, args.uri, args.link, args.fee, args.seats, args.occupiedSeats, args.date, args.collection, args.venue, args.authority, args.creators, args.eventHost, args.eventNonce, args.bump, args.isCutPayedByCreator, args.isCustomSplToken, args.customSplToken);
    }
    /**
     * Deserializes the {@link EventAccount} from the data of the provided {@link web3.AccountInfo}.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static fromAccountInfo(accountInfo, offset = 0) {
        return EventAccount.deserialize(accountInfo.data, offset);
    }
    /**
     * Retrieves the account info from the provided address and deserializes
     * the {@link EventAccount} from its data.
     *
     * @throws Error if no account info is found at the address or if deserialization fails
     */
    static fromAccountAddress(connection, address) {
        return __awaiter(this, void 0, void 0, function* () {
            const accountInfo = yield connection.getAccountInfo(address);
            if (accountInfo == null) {
                throw new Error(`Unable to find EventAccount account at ${address}`);
            }
            return EventAccount.fromAccountInfo(accountInfo, 0)[0];
        });
    }
    /**
     * Deserializes the {@link EventAccount} from the provided data Buffer.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static deserialize(buf, offset = 0) {
        return exports.eventAccountBeet.deserialize(buf, offset);
    }
    /**
     * Serializes the {@link EventAccount} into a Buffer.
     * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
     */
    serialize() {
        return exports.eventAccountBeet.serialize(Object.assign({ accountDiscriminator: eventAccountDiscriminator }, this));
    }
    /**
     * Returns the byteSize of a {@link Buffer} holding the serialized data of
     * {@link EventAccount} for the provided args.
     *
     * @param args need to be provided since the byte size for this account
     * depends on them
     */
    static byteSize(args) {
        const instance = EventAccount.fromArgs(args);
        return exports.eventAccountBeet.toFixedFromValue(Object.assign({ accountDiscriminator: eventAccountDiscriminator }, instance)).byteSize;
    }
    /**
     * Fetches the minimum balance needed to exempt an account holding
     * {@link EventAccount} data from rent
     *
     * @param args need to be provided since the byte size for this account
     * depends on them
     * @param connection used to retrieve the rent exemption information
     */
    static getMinimumBalanceForRentExemption(args, connection, commitment) {
        return __awaiter(this, void 0, void 0, function* () {
            return connection.getMinimumBalanceForRentExemption(EventAccount.byteSize(args), commitment);
        });
    }
    /**
     * Returns a readable version of {@link EventAccount} properties
     * and can be used to convert to JSON and/or logging
     */
    pretty() {
        return {
            title: this.title,
            description: this.description,
            uri: this.uri,
            link: this.link,
            fee: this.fee,
            seats: this.seats,
            occupiedSeats: this.occupiedSeats,
            date: this.date,
            collection: this.collection.toBase58(),
            venue: this.venue,
            authority: this.authority.toBase58(),
            creators: this.creators,
            eventHost: this.eventHost,
            eventNonce: this.eventNonce,
            bump: this.bump,
            isCutPayedByCreator: this.isCutPayedByCreator,
            isCustomSplToken: this.isCustomSplToken,
            customSplToken: this.customSplToken.toBase58(),
        };
    }
}
exports.EventAccount = EventAccount;
/**
 * @category Accounts
 * @category generated
 */
exports.eventAccountBeet = new beet.FixableBeetStruct([
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['title', beet.utf8String],
    ['description', beet.utf8String],
    ['uri', beet.utf8String],
    ['link', beet.utf8String],
    ['fee', beet.u64],
    ['seats', beet.u64],
    ['occupiedSeats', beet.u64],
    ['date', beet.utf8String],
    ['collection', beetSolana.publicKey],
    ['venue', beet.utf8String],
    ['authority', beetSolana.publicKey],
    ['creators', beet.array(beetSolana.publicKey)],
    ['eventHost', EventHost_1.eventHostBeet],
    ['eventNonce', beet.u64],
    ['bump', beet.u8],
    ['isCutPayedByCreator', beet.bool],
    ['isCustomSplToken', beet.bool],
    ['customSplToken', beetSolana.publicKey],
], EventAccount.fromArgs, 'EventAccount');
